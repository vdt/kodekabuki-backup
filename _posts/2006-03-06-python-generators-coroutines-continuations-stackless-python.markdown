--- 
layout: default
title: "Python: Generators, Coroutines, Continuations, Stackless Python"
tags: []

type: regular

---
<div> <p> I was watching Guido van Rossum's <a href="http://video.google.com/videoplay?docid=-7758421725489622662">State of the Python Universe 2006</a> talk at Google. And I came across this interesting feature in Python - support for generators via the <strong>yield</strong> keyword. It's a very interesting idea and the worst part is it seems to have been existing for quite sometime now and I didn't even know about it! </p>  <p> So after a bit of searching in IBM dW, I finally found these nice articles on generators and also related concepts like co-routines, continuations, and certain special implementations of Python (Stackless Python). </p>  <p> <a href="http://www-128.ibm.com/developerworks/library/l-pycon.html">Charming Python: Iterators and simple generators</a> </p>  <p> <a href="http://www-128.ibm.com/developerworks/linux/library/l-pygen.html?t=gr,lnxw03=PyGen">Charming Python: Generator-based state machines</a> </p>  <p> <a href="http://www-128.ibm.com/developerworks/library/l-pyth7.html">Charming Python: Inside Python's implementations</a> - This has the interview of the guy who implemented Stackless Python.  </p>  <p> <a href="http://www.stackless.com/spcpaper.htm">Continuations And Stackless Python</a> - This gives an introduction to continuations which was the main goal behind the development of Stackless Python. [Warning: very involved discussion. I didn't get it the first time!] </p>  <p> <strong>  Coroutines: Generic version of sub-routines</strong> </p>  <p> Coroutine is itself a very interesting programming paradigm that I never knew of until now. I wonder how this escaped me until now! Anyways wikipedia does a pretty good job <a href="http://en.wikipedia.org/wiki/Coroutine">summarising coroutines</a> [seriously, you need to read this!]. </p>  <p> <strong>The big picture</strong> </p> <ul><li>Coroutines are the generic version of sub-routines.</li><li>Coroutines in which subsequent calls yield additional results are often known as <a href="http://en.wikipedia.org/wiki/Generator_%28computer_science%29" title="Generator (computer science)">generators</a>.</li><li>Coroutines are implemented using continuations.</li></ul><p>technorati tags: <a href="http://technorati.com/tag/cs" rel="tag">cs</a>, <a href="http://technorati.com/tag/programming" rel="tag">programming</a>, <a href="http://technorati.com/tag/generator" rel="tag">generator</a>, <a href="http://technorati.com/tag/coroutine" rel="tag">coroutine</a>, <a href="http://technorati.com/tag/paradigm" rel="tag">paradigm</a>, <a href="http://technorati.com/tag/python" rel="tag">python</a>, <a href="http://technorati.com/tag/stackless" rel="tag">stackless</a>, <a href="http://technorati.com/tag/continuation" rel="tag">continuation</a></p></div>
