--- 
layout: default
title: Adobe vs Microsoft
tags: []

type: regular

---
<p>It is interesting that the web has focused so much on the ongoing war between Microsoft, Google and Yahoo in the search advertising space and other related areas. But no one has been focusing on the nice little cold war going on between Adobe and Microsoft. </p>With the acquisition of Macromedia, I personally think Adobe is more aggressive than it ever has been when it comes to gaining a strong foothold in the rich, interactive, media content both for the web and the desktop. <strong>Adobe has under its belt both PDF and Flash</strong> (two of the most recognized and most popular rich-content formats!).

If you look at the suite of products which Adobe is planning to release, you'll see what Adobe is targetting at:
<ul><li>Flex</li><li>Apollo</li></ul><p><strong>Flex</strong></p><p>    <a href="http://labs.adobe.com/flexproductline/">Flex</a> is basically Adobe's answer to AJAX except that it targets the Flash platform. You create an interactive web application using Flex, and basically compile it to Flash and it just runs on any browser which has a Flash player installed on it. <a href="http://www.openlaszlo.org/">OpenLaszlo</a> (has been opensourced now!) also achieves something similar. OpenLaszlo now even has an option to compile your app to DHTML.
</p><p>    Google's recently released <a href="http://code.google.com/webtoolkit/">GWT (Google Web Toolkit)</a> also does something similar for developers. But unlike Flex or OpenLaszlo which rely on XML-based languages, GWT just takes a plain old Java program and compiles it into Javascript.
</p><p>    Meanwhile Microsoft is not sitting back and letting these folks set the rules of the game - they have released their entire <a href="http://www.microsoft.com/products/expression/en/default.mspx">Expression suite</a> which also claims to help developers do everything which the others have been boasting of. Expression suite of products again help developers design rich interactive content inside graphic design suites, export it in XAML (XML-based language), and then just run any XAML content using the in-built WPF framework in Vista. They even have support for XAML content on the web and supposedly nice cross-platform support (Firefox/Windows, Safari/Mac) which they advertise as WPF/e where the e stands for "everywhere".</p><p><strong>Apollo</strong></p><p>    Now <a href="http://blogs.zdnet.com/Stewart/index.php?p=20">Apollo</a> goes one step ahead. With Apollo, Adobe is talking about putting a Flash player not just inside your browser, but right on your desktop (be it a PC, or a Mac, or a Linux box, or even a Symbian mobile phone!). Most importantly, the apps which have been designed for Apollo can run offline unlike the traditional browser-based Flash apps. <strong>Especially the idea of Adobe's Flash player sitting inside every Nokia phone is very interesting</strong>. Finally we might have the chance to write device-independent code for mobile phones which J2ME promised to achieve but never did. Note that Apollo is very much an internal project thinggy and you won't find any information on this on Adobe's site.
</p><p>    <strong>Adobe is changing itself from just a content design software company to a rich-content platform provider</strong>. And when Adobe is trying to do that, it is intentionally entering into those markets which the big bull Microsoft is also interested in. Microsoft has been talking a lot about WPF/e and how you can run very rich WPF-like apps not just on your Vista desktop but anywhere (browser running on a different OS, or even a mobile device). One more cool thing about WPF/e is that when you write a WPF/e app you have access to the entire .NET Framework! So you can write a WPF/e app not just using XAML/Javascript but using C#/.NET. It is a sort of similar to Google's GWT (which I mentioned earlier) except that GWT targets Java instead of .NET.</p><p>All this sounds really exciting and it certainly proves one thing - all the big guys have realised that <strong>the difference between a desktop app and a browser-based web app is going to fade away</strong> because people do not care and do not like to think about whether what they're using is a desktop app or a web app; what they want is seamless integration, mobility, and ease of use whether they're logged in to the internet or offline. </p>
