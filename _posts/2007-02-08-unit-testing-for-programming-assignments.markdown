--- 
layout: default
title: Unit testing for programming assignments
tags: []

type: regular

---
<blockquote> <p>In the last few installments of our program transformation course, the students had to develop a program instrumentation that traces the number of calls for every callee/caller pair for one of the assignments (we usually have about 10 assignments). Last year, we just described the problem in the <a href="http://www.cs.uu.nl/wiki/Pt03/AssignmentScopedDynamicRewriteRules">assignment</a>. The solutions of the students were ok, but not really exciting. <strong>They forgot to handle all kinds of cases</strong>, and some solutions even didn't terminate for some input programs.  <p>This year, I included a set of tests in the <a href="http://www.cs.uu.nl/wiki/Pt04/AssignmentConcreteObjectSyntax">assignment</a>, which illustrate most (but not all) of the problems in this program transformation. Surprise, surprise: <strong>the students suddenly were able to handle all the issues illustrated by the testsuite that I provided</strong>. However, obviously I did not give the students all tests (evil grin). Indeed, several solutions could not handle the tests that I did not provide.  <p>Most students don't write test. Worse, if they do test, then they create a single file and <em>modify</em> the test to check a new situation that they might have discovered. In this way they don't build up a nice testsuite.<strong> The important part of testing is that they can be repeated automatically, not that you run a test once!</strong></p></blockquote> <p>Source: <a href="http://mbravenboer.blogspot.com/index.html">Subject to Meta Programming</a> </p> <p>I pretty much had the same attitude towards the idea of writing unit tests as the above mentioned students when I took the first software engineering course. The problem I think was they never made convincing arguments in the class and did not try to show exactly what will be the benefits of&nbsp;writing (good)&nbsp;unit tests and how to reap the benefits once you've written them. All that they did was to say "unit tests are all good and you have to write them to get&nbsp;an A". They&nbsp;should have just said what Kent Beck had to say on the <a href="http://poundbang.in/2006/12/15/kent-beck-on-xp/">purpose of testing</a> in his book on XP to convince me! </p> <p>Now ofcourse I'm&nbsp;all for the idea of&nbsp;writing unit tests for most programming assignments :)</p> <div class="wlWriterSmartContent" id="0767317B-992E-4b12-91E0-4F059A8CECA8:24d65b54-630c-42a1-b1ef-0a73a683e2b2" contenteditable="false" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px">Technorati tags: <a href="http://technorati.com/tags/unit%20testing" rel="tag">unit testing</a>, <a href="http://technorati.com/tags/xp" rel="tag">xp</a>, <a href="http://technorati.com/tags/cs" rel="tag">cs</a>, <a href="http://technorati.com/tags/assignments" rel="tag">assignments</a>, <a href="http://technorati.com/tags/programming" rel="tag">programming</a>, <a href="http://technorati.com/tags/software%20engineering" rel="tag">software engineering</a></div>
