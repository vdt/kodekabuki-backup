--- 
layout: default
title: Python strings vs Ruby symbols
tags: []

type: regular

---
<p>I've been reading a bit about Ruby over the weekend. Why? Mainly because I want to&nbsp;be able to read and understand&nbsp;interesting stuff like Ola Bini's <a href="http://ola-bini.blogspot.com/2006/09/ruby-metaprogramming-techniques.html">meta-programming post</a>, Avi Byrant's <a href="http://smallthought.com/avi/etech.pdf">ETech presentation</a>&nbsp;[pdf]. As an added incentive, Rubyists can't&nbsp;bullshit me anymore and get away with it :-)</p> <p>As a Python programmer, most of the stuff in Ruby is pretty straight-forward - Python lists -&gt; Ruby arrays, Python dictionaries -&gt; Ruby hashes, classes, objects, dynamic/duck typing, interactive interpreter, etc.&nbsp;A few things like code blocks, optional return keyword, optional parantheses around method arguments, naming conventions like appending ? to certain methods, modules/mix-ins, symbols are ofcourse confusing and strange in the beginning.</p> <p><em>Ruby symbols are interesting</em>. After a bit of searching, I found someone post on a forum explaining Ruby symbols in the light of Python strings:</p> <blockquote> <p>You can see symbols as read-only strings used to very quickly find informations in, for example, a hash table. The idea is to get an efficient implementation while keeping the code readable by human beings. As you seem to come from the Python's world, you probably know that Python's strings are immutable. And if you read a little bit about why strings in Python are immutable, you will see it's because they wanted to optimize the method lookup. Also you will learn that short Python's string are coded differently so that a simple integer lookup is used for method lookup. </p> <p>In the end, <strong>Python's string are what's called in Ruby Symbol and Ruby's strings have no equivalent in Python, as Python has no mutable string class.</strong></p></blockquote> <p>And here's an excerpt from <a href="http://www.python.org/doc/faq/general/#why-are-python-strings-immutable">Python FAQs</a> explaining why Python strings have been made immutable:</p> <blockquote> <p>There are several advantages.</p> <p>One is performance: knowing that a string is immutable makes it easy to lay it out at construction time -- fixed and unchanging storage requirements. This is also one of the reasons for the distinction between tuples and lists.  <p>The other is that strings in Python are considered as "elemental" as numbers. No amount of activity will change the value 8 to anything else, and in Python, no amount of activity will change the string "eight" to anything else.</p></blockquote> <div class="wlWriterSmartContent" id="0767317B-992E-4b12-91E0-4F059A8CECA8:4c2b5f8f-94cd-44ab-9a26-ec0000988d97" contenteditable="false" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px">Technorati tags: <a href="http://technorati.com/tags/ruby" rel="tag">ruby</a>, <a href="http://technorati.com/tags/language" rel="tag">language</a>, <a href="http://technorati.com/tags/design" rel="tag">design</a>, <a href="http://technorati.com/tags/programming" rel="tag">programming</a>, <a href="http://technorati.com/tags/python" rel="tag">python</a>, <a href="http://technorati.com/tags/symbol" rel="tag">symbol</a>, <a href="http://technorati.com/tags/string" rel="tag">string</a>, <a href="http://technorati.com/tags/mutable" rel="tag">mutable</a>, <a href="http://technorati.com/tags/immutable" rel="tag">immutable</a></div>
